---
- set_fact: kafka_mirrormaker_host_dir=/srv/services/kafka-mirrormaker-{{ kafka_mirrormaker_source.name }}

- set_fact: kafka_mirrormaker_restart_docker=no

- fail: "kafka-mirrormaker jmx_port is not within allowed bounds [{{ kafka_mirrormaker_jmx_port_base }}, {{ kafka_mirrormaker_jmx_port_end }}]"
  when:
    - kafka_mirrormaker_jmx_port_base + kafka_mirrormaker_source.jmx_port_offset > kafka_mirrormaker_jmx_port_end
    - kafka_mirrormaker_source.jmx_port_offset < 0

- file: path="{{ item }}" state=directory
  with_items:
    - "{{ kafka_mirrormaker_host_dir }}"
    - "{{ kafka_mirrormaker_conf_dir }}"

- file: src="{{ kafka_mirrormaker_conf_dir }}" dest="{{ kafka_mirrormaker_host_dir }}/conf" state=link force=yes

- name: copy logger props
  template: src="{{ item }}.j2" dest="{{ kafka_mirrormaker_host_dir }}/conf/{{ item }}"
  with_items:
    - log4j.properties
    - consumer.properties
    - producer.properties
    - jmxport.txt
  notify: restart kafka-mirrormaker

- meta: flush_handlers

- name: add container to whitelist
  set_fact: docker_containers_whitelist="{{ docker_containers_whitelist }} + [ 'kafka-mirrormaker-{{ kafka_mirrormaker_source.name }}' ]"
  tags: always

- name: start kafka-mirrormaker
  docker_container:
    name: kafka-mirrormaker-{{ kafka_mirrormaker_source.name }}
    state: started
    restart_policy: unless-stopped
    image: confluentinc/cp-kafka:3.2.0-2
    recreate: "{{ kafka_mirrormaker_restart_docker }}"
    network_mode: host
    log_driver: json-file
    entrypoint: "/usr/bin/kafka-mirror-maker"
    command: "--consumer.config /conf/consumer.properties --producer.config /conf/producer.properties --num.streams {{ kafka_mirrormaker_source.num_streams|default(1) }} --whitelist {{ kafka_mirrormaker_source.topics_regex }}"
    env:
      KAFKA_HEAP_OPTS: -Xmx512m
      JMX_PORT: "{{ kafka_mirrormaker_jmx_port_base + kafka_mirrormaker_source.jmx_port_offset }}"
    volumes:
      - "{{ kafka_mirrormaker_host_dir }}/conf:/conf"
